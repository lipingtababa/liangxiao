name: 测试管道

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每天凌晨2点运行
    - cron: '0 2 * * *'

jobs:
  lint:
    name: 代码检查
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: 设置 Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy

      - name: 运行 flake8
        run: flake8 scripts/ tests/ --max-line-length=120 --ignore=E203,W503

      - name: 检查 Black 格式
        run: black --check scripts/ tests/

      - name: 检查导入排序
        run: isort --check-only scripts/ tests/

  unit-tests:
    name: 单元测试
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']

    steps:
      - uses: actions/checkout@v3

      - name: 设置 Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: 运行单元测试
        run: |
          python -m pytest tests/unit/ -v --cov=scripts --cov-report=xml --cov-report=term

      - name: 上传覆盖率报告
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    name: 集成测试
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - uses: actions/checkout@v3

      - name: 设置 Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: 运行集成测试
        run: |
          python -m pytest tests/integration/ -v --tb=short

      - name: 保存测试结果
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: test-results/

  e2e-tests:
    name: 端到端测试
    runs-on: ubuntu-latest
    needs: integration-tests

    steps:
      - uses: actions/checkout@v3

      - name: 设置 Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: 安装 Python 依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: 安装 Node.js 依赖
        run: npm ci

      - name: 构建前端
        run: npm run build

      - name: 运行端到端测试
        run: |
          python -m pytest tests/e2e/ -v --tb=short

      - name: 保存测试报告
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-report
          path: |
            test-results/
            screenshots/

  performance-tests:
    name: 性能测试
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - uses: actions/checkout@v3

      - name: 设置 Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: 运行性能测试
        run: |
          python -m pytest tests/performance/ -v --benchmark-only

      - name: 生成性能报告
        run: |
          python scripts/generate_performance_report.py

      - name: 上传性能报告
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.html

  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: 设置 Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 安装安全工具
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: 检查依赖安全性
        run: safety check -r requirements.txt

      - name: 运行 Bandit 安全扫描
        run: bandit -r scripts/ -ll

      - name: Trivy 扫描
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 上传扫描结果
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-test:
    name: 部署测试
    runs-on: ubuntu-latest
    needs: [e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: 设置环境
        run: |
          echo "DEPLOYMENT_ENV=staging" >> $GITHUB_ENV

      - name: 验证部署配置
        run: |
          echo "验证部署配置..."
          # 这里添加部署验证逻辑

      - name: 模拟部署
        run: |
          echo "模拟部署到测试环境..."
          # 这里添加实际部署逻辑

  notification:
    name: 发送通知
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, e2e-tests, performance-tests, security-scan]
    if: always()

    steps:
      - name: 检查测试状态
        id: test-status
        run: |
          if [ "${{ needs.unit-tests.result }}" == "success" ] && \
             [ "${{ needs.integration-tests.result }}" == "success" ] && \
             [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: 发送 Slack 通知
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="${{ steps.test-status.outputs.status }}"
          COLOR=$([ "$STATUS" == "success" ] && echo "good" || echo "danger")
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-Type: application/json' \
            -d "{
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"title\": \"测试管道结果\",
                \"text\": \"测试管道 $STATUS - ${{ github.repository }}#${{ github.run_number }}\",
                \"fields\": [
                  {\"title\": \"分支\", \"value\": \"${{ github.ref }}\", \"short\": true},
                  {\"title\": \"提交\", \"value\": \"${{ github.sha }}\", \"short\": true}
                ]
              }]
            }"