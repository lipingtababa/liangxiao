name: 验证输出格式

on:
  workflow_dispatch:
    inputs:
      output_path:
        description: '要验证的输出路径'
        required: false
        default: 'posts/'
      strict_mode:
        description: '严格模式验证'
        type: boolean
        default: true

jobs:
  validate-output:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 安装依赖
      run: |
        pip install -r requirements.txt
        pip install jsonschema pyyaml markdown
        
    - name: 准备验证环境
      run: |
        echo "准备验证环境..."
        mkdir -p validation-results
        
        # 设置验证路径
        VALIDATION_PATH="${{ github.event.inputs.output_path }}"
        echo "VALIDATION_PATH=$VALIDATION_PATH" >> $GITHUB_ENV
        
        if [ ! -d "$VALIDATION_PATH" ]; then
          echo "错误: 验证路径 $VALIDATION_PATH 不存在"
          exit 1
        fi
        
        echo "验证路径: $VALIDATION_PATH"
        echo "文件数量: $(find $VALIDATION_PATH -type f | wc -l)"
        
    - name: 验证Markdown文件格式
      run: |
        echo "=== 验证Markdown文件格式 ==="
        
        MARKDOWN_FILES=$(find $VALIDATION_PATH -name "*.md")
        MARKDOWN_COUNT=$(echo "$MARKDOWN_FILES" | wc -w)
        
        echo "找到 $MARKDOWN_COUNT 个Markdown文件"
        
        VALID_COUNT=0
        ERROR_COUNT=0
        
        for md_file in $MARKDOWN_FILES; do
          echo "验证文件: $md_file"
          
          # 检查文件是否为空
          if [ ! -s "$md_file" ]; then
            echo "✗ 错误: 文件为空"
            ((ERROR_COUNT++))
            continue
          fi
          
          # 检查YAML frontmatter
          if head -1 "$md_file" | grep -q "^---$"; then
            echo "✓ YAML frontmatter存在"
            
            # 提取frontmatter进行验证
            sed -n '2,/^---$/p' "$md_file" | head -n -1 > temp_frontmatter.yml
            
            # 验证YAML格式
            if python -c "import yaml; yaml.safe_load(open('temp_frontmatter.yml'))" 2>/dev/null; then
              echo "✓ YAML格式正确"
            else
              echo "✗ YAML格式错误"
              ((ERROR_COUNT++))
              continue
            fi
            
            # 检查必需字段
            python << 'EOF'
import yaml
with open('temp_frontmatter.yml') as f:
    data = yaml.safe_load(f)

required_fields = ['title', 'date', 'author']
missing_fields = []

for field in required_fields:
    if field not in data or not data[field]:
        missing_fields.append(field)

if missing_fields:
    print(f"✗ 缺少必需字段: {', '.join(missing_fields)}")
    exit(1)
else:
    print("✓ 所有必需字段存在")
EOF
            
            if [ $? -ne 0 ]; then
              ((ERROR_COUNT++))
              continue
            fi
            
            rm -f temp_frontmatter.yml
            
          else
            echo "✗ 错误: 缺少YAML frontmatter"
            ((ERROR_COUNT++))
            continue
          fi
          
          # 检查内容部分（frontmatter后面的内容）
          CONTENT_START=$(grep -n "^---$" "$md_file" | tail -1 | cut -d: -f1)
          CONTENT_START=$((CONTENT_START + 1))
          
          if [ $CONTENT_START -gt 0 ]; then
            CONTENT_LINES=$(tail -n +$CONTENT_START "$md_file" | wc -l)
            if [ $CONTENT_LINES -lt 5 ]; then
              echo "✗ 警告: 内容太短 ($CONTENT_LINES 行)"
              if [ "${{ github.event.inputs.strict_mode }}" = "true" ]; then
                ((ERROR_COUNT++))
                continue
              fi
            else
              echo "✓ 内容长度合适 ($CONTENT_LINES 行)"
            fi
          fi
          
          # 检查图片引用
          IMG_REFS=$(grep -c "!\[.*\](.*)" "$md_file" || echo "0")
          echo "✓ 图片引用: $IMG_REFS 个"
          
          ((VALID_COUNT++))
          echo "✓ 文件验证通过: $md_file"
          echo ""
        done
        
        echo "=== Markdown验证结果 ==="
        echo "总文件数: $MARKDOWN_COUNT"
        echo "验证通过: $VALID_COUNT"
        echo "验证失败: $ERROR_COUNT"
        
        # 保存结果
        cat > validation-results/markdown-validation.json << EOF
        {
          "total_files": $MARKDOWN_COUNT,
          "valid_files": $VALID_COUNT,
          "error_files": $ERROR_COUNT,
          "success_rate": $(python -c "print($VALID_COUNT / max($MARKDOWN_COUNT, 1) * 100)" 2>/dev/null || echo "0")
        }
        EOF
        
    - name: 验证JSON数据文件
      run: |
        echo "=== 验证JSON数据文件 ==="
        
        JSON_FILES=$(find $VALIDATION_PATH -name "*.json" | head -20)  # 限制数量避免输出太多
        JSON_COUNT=$(find $VALIDATION_PATH -name "*.json" | wc -l)
        
        echo "找到 $JSON_COUNT 个JSON文件"
        
        VALID_JSON=0
        ERROR_JSON=0
        
        for json_file in $JSON_FILES; do
          echo "验证JSON文件: $json_file"
          
          # 验证JSON格式
          if python -m json.tool "$json_file" > /dev/null 2>&1; then
            echo "✓ JSON格式正确"
            
            # 检查关键字段
            python << EOF
import json
with open('$json_file') as f:
    data = json.load(f)

expected_fields = ['title', 'content']
for field in expected_fields:
    if field in data and data[field]:
        print(f"✓ 字段 {field} 存在")
    else:
        print(f"✗ 字段 {field} 缺失或为空")
EOF
            
            ((VALID_JSON++))
          else
            echo "✗ JSON格式错误"
            ((ERROR_JSON++))
          fi
          
          echo ""
        done
        
        echo "=== JSON验证结果 ==="
        echo "验证通过: $VALID_JSON"
        echo "验证失败: $ERROR_JSON"
        
    - name: 验证图片文件
      run: |
        echo "=== 验证图片文件 ==="
        
        IMAGE_FILES=$(find $VALIDATION_PATH -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.webp" \))
        IMAGE_COUNT=$(echo "$IMAGE_FILES" | grep -v "^$" | wc -l)
        
        echo "找到 $IMAGE_COUNT 个图片文件"
        
        VALID_IMAGES=0
        ERROR_IMAGES=0
        
        for img_file in $IMAGE_FILES; do
          if [ -f "$img_file" ]; then
            echo "验证图片: $img_file"
            
            # 检查文件大小
            SIZE=$(wc -c < "$img_file")
            if [ $SIZE -lt 100 ]; then
              echo "✗ 文件太小 ($SIZE 字节)"
              ((ERROR_IMAGES++))
            elif [ $SIZE -gt 10485760 ]; then  # 10MB
              echo "✗ 文件太大 ($SIZE 字节)"
              ((ERROR_IMAGES++))
            else
              echo "✓ 文件大小合适 ($SIZE 字节)"
              ((VALID_IMAGES++))
            fi
            
            # 检查文件头（简单验证）
            if file "$img_file" | grep -q -E "(JPEG|PNG|WebP)"; then
              echo "✓ 图片格式正确"
            else
              echo "✗ 图片格式可能有问题"
            fi
          fi
        done
        
        echo "=== 图片验证结果 ==="
        echo "验证通过: $VALID_IMAGES"
        echo "验证失败: $ERROR_IMAGES"
        
    - name: 生成验证报告
      if: always()
      run: |
        echo "=== 生成验证报告 ==="
        
        cat > validation-results/validation-report.md << 'EOF'
        # 输出格式验证报告
        
        ## 验证配置
        - 验证路径: ${{ github.event.inputs.output_path }}
        - 严格模式: ${{ github.event.inputs.strict_mode }}
        - 验证时间: $(date)
        
        ## 验证结果摘要
        EOF
        
        # 添加Markdown验证结果
        if [ -f "validation-results/markdown-validation.json" ]; then
          echo "### Markdown文件" >> validation-results/validation-report.md
          python << 'EOF'
import json
with open('validation-results/markdown-validation.json') as f:
    data = json.load(f)
print(f"- 总文件数: {data['total_files']}")
print(f"- 验证通过: {data['valid_files']}")
print(f"- 验证失败: {data['error_files']}")
print(f"- 成功率: {data['success_rate']:.1f}%")
EOF
          python << 'EOF' >> validation-results/validation-report.md
import json
with open('validation-results/markdown-validation.json') as f:
    data = json.load(f)
print(f"- 总文件数: {data['total_files']}")
print(f"- 验证通过: {data['valid_files']}")
print(f"- 验证失败: {data['error_files']}")
print(f"- 成功率: {data['success_rate']:.1f}%")
EOF
        fi
        
        echo "" >> validation-results/validation-report.md
        
        # 显示报告
        cat validation-results/validation-report.md
        
    - name: 上传验证结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: validation-results
        path: |
          validation-results/
          *.log
        retention-days: 7
        
    - name: 输出验证摘要
      if: always()
      run: |
        echo "## 输出格式验证摘要" >> $GITHUB_STEP_SUMMARY
        echo "- 验证路径: ${{ github.event.inputs.output_path }}" >> $GITHUB_STEP_SUMMARY
        echo "- 严格模式: ${{ github.event.inputs.strict_mode }}" >> $GITHUB_STEP_SUMMARY
        echo "- 验证状态: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "validation-results/markdown-validation.json" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Markdown文件验证" >> $GITHUB_STEP_SUMMARY
          python << 'EOF' >> $GITHUB_STEP_SUMMARY
import json
with open('validation-results/markdown-validation.json') as f:
    data = json.load(f)
print(f"- 成功率: {data['success_rate']:.1f}% ({data['valid_files']}/{data['total_files']})")
EOF
        fi