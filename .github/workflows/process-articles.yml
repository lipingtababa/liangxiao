name: 自动处理文章

# 当articles.txt文件发生变更时触发
on:
  push:
    branches:
      - main
      - feature/**
    paths:
      - 'articles.txt'
  workflow_dispatch:
    inputs:
      force_process:
        description: '强制处理所有文章'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  process-articles:
    name: 处理文章变更
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      # 1. 检出代码
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # 获取最近两次提交以便比较

      # 2. 设置Python环境
      - name: 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # 3. 缓存Python依赖
      - name: 缓存Python依赖
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4. 安装Python依赖
      - name: 安装Python依赖
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      # 5. 检测文章变更
      - name: 检测文章变更
        id: detect_changes
        run: |
          echo "## 检测articles.txt变更"

          # 如果是强制处理，处理所有文章
          if [ "${{ github.event.inputs.force_process }}" == "true" ]; then
            echo "强制处理模式：将处理所有文章"
            cp articles.txt articles_to_process.txt
            echo "articles_count=$(wc -l < articles_to_process.txt)" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            # 获取变更的URL
            if [ "${{ github.event_name }}" == "push" ]; then
              # 比较当前版本和上一个版本的articles.txt
              git diff HEAD~1 HEAD -- articles.txt > diff.txt || true

              # 提取新增的URL
              grep "^+" diff.txt | grep "^+http" | sed 's/^+//' > articles_to_process.txt || true

              if [ -s articles_to_process.txt ]; then
                echo "发现新增文章URL:"
                cat articles_to_process.txt
                echo "articles_count=$(wc -l < articles_to_process.txt)" >> $GITHUB_OUTPUT
                echo "has_changes=true" >> $GITHUB_OUTPUT
              else
                echo "没有新增文章"
                echo "articles_count=0" >> $GITHUB_OUTPUT
                echo "has_changes=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "手动触发：将处理所有文章"
              cp articles.txt articles_to_process.txt
              echo "articles_count=$(wc -l < articles_to_process.txt)" >> $GITHUB_OUTPUT
              echo "has_changes=true" >> $GITHUB_OUTPUT
            fi
          fi

      # 6. 处理文章（提取内容）
      - name: 提取文章内容
        if: steps.detect_changes.outputs.has_changes == 'true'
        id: extract
        run: |
          echo "## 开始提取文章内容"

          # 创建输出目录
          mkdir -p extracted_articles

          # 处理每个URL
          while IFS= read -r url || [ -n "$url" ]; do
            if [ -n "$url" ] && [ "$url" != "" ]; then
              echo "处理: $url"

              # 生成输出文件名（使用URL的MD5作为文件名）
              filename=$(echo -n "$url" | md5sum | cut -d' ' -f1)
              output_file="extracted_articles/${filename}.json"

              # 运行提取脚本
              python scripts/extract_content_starter.py \
                --url "$url" \
                --output "$output_file" || {
                echo "::warning::提取失败: $url"
                continue
              }

              echo "✓ 提取成功: $output_file"
            fi
          done < articles_to_process.txt

          # 统计成功提取的文章数
          extracted_count=$(ls extracted_articles/*.json 2>/dev/null | wc -l || echo 0)
          echo "extracted_count=$extracted_count" >> $GITHUB_OUTPUT

          if [ "$extracted_count" -gt 0 ]; then
            echo "成功提取 $extracted_count 篇文章"
            echo "extraction_success=true" >> $GITHUB_OUTPUT
          else
            echo "::error::没有成功提取任何文章"
            echo "extraction_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      # 7. 翻译文章
      - name: 翻译文章
        if: steps.extract.outputs.extraction_success == 'true'
        id: translate
        run: |
          echo "## 开始翻译文章"

          # 创建翻译输出目录
          mkdir -p translated_articles

          # 检查是否有翻译脚本
          if [ -f "scripts/translate_article.py" ]; then
            # 翻译每个提取的文章
            for json_file in extracted_articles/*.json; do
              if [ -f "$json_file" ]; then
                echo "翻译: $json_file"

                # 生成输出文件名
                basename=$(basename "$json_file" .json)
                output_file="translated_articles/${basename}_translated.json"

                # 运行翻译脚本
                python scripts/translate_article.py \
                  --input "$json_file" \
                  --output "$output_file" || {
                  echo "::warning::翻译失败: $json_file"
                  continue
                }

                echo "✓ 翻译成功: $output_file"
              fi
            done
          else
            echo "::warning::翻译脚本不存在，跳过翻译步骤"
            # 直接复制提取的文件作为"翻译"结果
            cp -r extracted_articles/* translated_articles/ 2>/dev/null || true
          fi

          # 统计翻译成功的文章数
          translated_count=$(ls translated_articles/*.json 2>/dev/null | wc -l || echo 0)
          echo "translated_count=$translated_count" >> $GITHUB_OUTPUT

          if [ "$translated_count" -gt 0 ]; then
            echo "成功翻译 $translated_count 篇文章"
            echo "translation_success=true" >> $GITHUB_OUTPUT
          else
            echo "::warning::没有成功翻译任何文章，使用原始内容"
            echo "translation_success=false" >> $GITHUB_OUTPUT
          fi

      # 8. 生成Markdown文件
      - name: 生成Markdown文件
        if: steps.extract.outputs.extraction_success == 'true'
        id: generate_markdown
        run: |
          echo "## 生成Markdown文件"

          # 创建posts目录
          mkdir -p app/posts

          # 检查是否有Markdown生成脚本
          if [ -f "scripts/generate_markdown.py" ]; then
            # 选择输入目录（优先使用翻译后的文章）
            if [ -d "translated_articles" ] && [ "$(ls -A translated_articles)" ]; then
              input_dir="translated_articles"
            else
              input_dir="extracted_articles"
            fi

            # 为每个JSON文件生成Markdown
            for json_file in $input_dir/*.json; do
              if [ -f "$json_file" ]; then
                echo "生成Markdown: $json_file"

                # 运行Markdown生成脚本
                python scripts/generate_markdown.py \
                  --input "$json_file" \
                  --output-dir "app/posts" || {
                  echo "::warning::Markdown生成失败: $json_file"
                  continue
                }

                echo "✓ Markdown生成成功"
              fi
            done
          else
            echo "::warning::Markdown生成脚本不存在，创建简单的Markdown文件"

            # 创建简单的Markdown文件
            for json_file in extracted_articles/*.json; do
              if [ -f "$json_file" ]; then
                # 提取基本信息并创建简单的Markdown
                title=$(python -c "import json; print(json.load(open('$json_file'))['title'])" 2>/dev/null || echo "无标题")
                content=$(python -c "import json; print(json.load(open('$json_file'))['content']['text'])" 2>/dev/null || echo "无内容")
                date=$(date +%Y-%m-%d)
                basename=$(basename "$json_file" .json)

                cat > "app/posts/${basename}.md" << EOF
---
title: "$title"
date: "$date"
author: "瑞典马工"
---

$content
EOF
                echo "✓ 创建Markdown: app/posts/${basename}.md"
              fi
            done
          fi

          # 统计生成的Markdown文件数
          markdown_count=$(ls app/posts/*.md 2>/dev/null | wc -l || echo 0)
          echo "markdown_count=$markdown_count" >> $GITHUB_OUTPUT

          if [ "$markdown_count" -gt 0 ]; then
            echo "成功生成 $markdown_count 个Markdown文件"
            echo "markdown_success=true" >> $GITHUB_OUTPUT
          else
            echo "::error::没有生成任何Markdown文件"
            echo "markdown_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      # 9. 提交变更
      - name: 提交生成的文件
        if: steps.generate_markdown.outputs.markdown_success == 'true'
        id: commit
        run: |
          echo "## 提交变更"

          # 配置Git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions Bot"

          # 添加生成的文件
          git add app/posts/*.md

          # 检查是否有变更
          if git diff --staged --quiet; then
            echo "没有新的变更需要提交"
            echo "has_commits=false" >> $GITHUB_OUTPUT
          else
            # 创建提交信息
            commit_message="自动处理文章 [skip ci]

          处理了 ${{ steps.extract.outputs.extracted_count }} 篇文章
          - 提取: ${{ steps.extract.outputs.extracted_count }} 篇
          - 翻译: ${{ steps.translate.outputs.translated_count }} 篇
          - 生成Markdown: ${{ steps.generate_markdown.outputs.markdown_count }} 篇

          触发者: ${{ github.actor }}
          工作流运行: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

            # 提交变更
            git commit -m "$commit_message"

            # 推送到当前分支
            git push origin HEAD

            echo "✓ 成功提交变更"
            echo "has_commits=true" >> $GITHUB_OUTPUT

            # 输出提交信息
            echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          fi

      # 10. 触发Vercel部署（通过webhook或等待自动部署）
      - name: 通知Vercel部署
        if: steps.commit.outputs.has_commits == 'true'
        continue-on-error: true
        run: |
          echo "## 触发Vercel部署"

          # Vercel会自动检测到Git推送并部署
          echo "✓ Git推送已完成，Vercel将自动检测并部署"

          # 如果配置了Vercel webhook，可以主动触发
          if [ -n "${{ secrets.VERCEL_DEPLOY_HOOK }}" ]; then
            echo "触发Vercel部署webhook..."
            curl -X POST "${{ secrets.VERCEL_DEPLOY_HOOK }}" || {
              echo "::warning::Vercel webhook触发失败，但Vercel仍会自动部署"
            }
          fi

      # 11. 生成处理报告
      - name: 生成处理报告
        if: always() && steps.detect_changes.outputs.has_changes == 'true'
        run: |
          echo "# 📊 文章处理报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 处理统计" >> $GITHUB_STEP_SUMMARY
          echo "| 步骤 | 数量 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 检测到的文章 | ${{ steps.detect_changes.outputs.articles_count }} | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| 成功提取 | ${{ steps.extract.outputs.extracted_count || 0 }} | ${{ steps.extract.outputs.extraction_success == 'true' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 成功翻译 | ${{ steps.translate.outputs.translated_count || 0 }} | ${{ steps.translate.outputs.translation_success == 'true' && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 生成Markdown | ${{ steps.generate_markdown.outputs.markdown_count || 0 }} | ${{ steps.generate_markdown.outputs.markdown_success == 'true' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.commit.outputs.has_commits }}" == "true" ]; then
            echo "## 提交信息" >> $GITHUB_STEP_SUMMARY
            echo "- 提交SHA: \`${{ steps.commit.outputs.commit_sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- 分支: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 部署状态" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.commit.outputs.has_commits }}" == "true" ]; then
            echo "✅ 变更已推送，等待Vercel自动部署" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ 没有新的变更需要部署" >> $GITHUB_STEP_SUMMARY
          fi

      # 12. 错误通知（可选）
      - name: 发送错误通知
        if: failure()
        continue-on-error: true
        run: |
          echo "::error::文章处理失败，请检查日志"

          # 如果配置了通知webhook（如Slack、Discord等）
          if [ -n "${{ secrets.NOTIFICATION_WEBHOOK }}" ]; then
            curl -X POST "${{ secrets.NOTIFICATION_WEBHOOK }}" \
              -H "Content-Type: application/json" \
              -d '{
                "text": "⚠️ 文章处理失败",
                "blocks": [{
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*文章处理工作流失败*\n• 仓库: ${{ github.repository }}\n• 分支: ${{ github.ref_name }}\n• 运行者: ${{ github.actor }}\n• <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|查看详情>"
                  }
                }]
              }' || true
          fi

  # 清理工作（可选）
  cleanup:
    name: 清理临时文件
    runs-on: ubuntu-latest
    needs: process-articles
    if: always()
    continue-on-error: true

    steps:
      - name: 清理工作流产物
        run: |
          echo "清理完成"
          # GitHub Actions会自动清理临时文件
          # 这里可以添加额外的清理逻辑（如清理缓存等）