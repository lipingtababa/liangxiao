name: 测试翻译管道 / Test Translation Pipeline

on:
  push:
    branches: [ main, develop, "feature/*" ]
    paths:
      - 'scripts/**'
      - 'requirements.txt'
      - '.github/workflows/test-pipeline.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'scripts/**'
      - 'requirements.txt'

jobs:
  test:
    name: 运行测试 / Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: 检出代码 / Checkout code
      uses: actions/checkout@v3

    - name: 设置Python环境 / Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 缓存依赖 / Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 安装依赖 / Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pylint

    - name: 代码质量检查 / Code quality check
      run: |
        # 运行flake8
        flake8 scripts --count --select=E9,F63,F7,F82 --show-source --statistics
        # 运行pylint（允许失败）
        pylint scripts --exit-zero

    - name: 运行单元测试 / Run unit tests
      run: |
        pytest scripts/tests -m unit -v --cov=scripts --cov-report=xml --cov-report=term

    - name: 运行集成测试 / Run integration tests
      run: |
        pytest scripts/tests -m integration -v

    - name: 上传覆盖率报告 / Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: 生成测试报告 / Generate test report
      if: always()
      run: |
        pip install pytest-html
        pytest scripts/tests --html=report.html --self-contained-html

    - name: 上传测试报告 / Upload test report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-report-${{ matrix.python-version }}
        path: report.html

  e2e-test:
    name: 端到端测试 / E2E Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 检出代码 / Checkout code
      uses: actions/checkout@v3

    - name: 设置Python环境 / Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 安装依赖 / Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 准备测试数据 / Prepare test data
      run: |
        mkdir -p .github/test-data
        echo '<h1 class="rich_media_title">测试文章</h1>' > .github/test-data/mock-wechat-article.html

    - name: 运行端到端测试 / Run E2E tests
      run: |
        # 测试内容提取
        python scripts/extract_content_with_state.py --mock --output test-output.json

        # 验证输出
        python -c "import json; data = json.load(open('test-output.json')); assert data.get('title') == '测试文章'"

        # 测试Markdown生成
        python scripts/markdown_generator.py --input test-output.json --output-dir test-posts

        # 验证Markdown文件
        ls test-posts/*.md

    - name: 测试状态管理 / Test state management
      run: |
        python scripts/state_manager.py --status

  performance:
    name: 性能测试 / Performance Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 检出代码 / Checkout code
      uses: actions/checkout@v3

    - name: 设置Python环境 / Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 安装依赖 / Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark

    - name: 运行性能测试 / Run performance tests
      run: |
        # 测试大文件处理性能
        python -c "
        import time
        from scripts.markdown_generator import generate_markdown

        # 创建大文章
        large_article = {
            'title': '性能测试',
            'content': {'text': '测试内容' * 10000},
            'images': []
        }

        start = time.time()
        result = generate_markdown(large_article)
        duration = time.time() - start

        print(f'处理时间: {duration:.2f}秒')
        assert duration < 5, '处理时间超过5秒'
        "

  notify:
    name: 通知结果 / Notify Results
    runs-on: ubuntu-latest
    needs: [test, e2e-test, performance]
    if: always()

    steps:
    - name: 检查测试状态 / Check test status
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && \
           [ "${{ needs.e2e-test.result }}" == "success" ] && \
           [ "${{ needs.performance.result }}" == "success" ]; then
          echo "✅ 所有测试通过！"
        else
          echo "❌ 部分测试失败"
          exit 1
        fi