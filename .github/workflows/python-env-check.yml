name: Python环境验证 / Python Environment Check

on:
  workflow_dispatch:
  push:
    paths:
      - 'requirements.txt'
      - 'scripts/**/*.py'
      - '.github/workflows/python-env-check.yml'
  pull_request:
    paths:
      - 'requirements.txt'
      - 'scripts/**/*.py'

jobs:
  check-environment:
    name: 检查Python环境配置
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: 显示Python版本
      run: |
        echo "Python版本信息:"
        python --version
        python -c "import sys; print(f'Python路径: {sys.executable}')"

    - name: 升级pip
      run: |
        python -m pip install --upgrade pip
        pip --version

    - name: 安装项目依赖
      run: |
        echo "开始安装依赖包..."
        pip install -r requirements.txt
        echo "依赖安装完成"

    - name: 列出已安装的包
      run: |
        echo "已安装的Python包:"
        pip list

    - name: 验证关键依赖
      run: |
        echo "验证关键依赖包..."
        python -c "import requests; print(f'requests: {requests.__version__}')"
        python -c "import bs4; print(f'beautifulsoup4: {bs4.__version__}')"
        python -c "import googletrans; print(f'googletrans: {googletrans.__version__}')"
        python -c "import markdown; print(f'markdown: {markdown.__version__}')"
        python -c "import frontmatter; print('frontmatter: installed')"
        python -c "import PIL; print(f'Pillow: {PIL.__version__}')"
        python -c "import lxml; print(f'lxml: installed')"
        python -c "import html2text; print(f'html2text: {html2text.__version__}')"
        python -c "import dotenv; print('python-dotenv: installed')"
        python -c "import slugify; print('python-slugify: installed')"
        python -c "import dateutil; print('python-dateutil: installed')"

    - name: 创建测试环境变量文件
      run: |
        cat > .env << EOF
        IMAGE_DOWNLOAD_PATH=./public/images
        IMAGE_QUALITY=85
        MAX_IMAGE_WIDTH=1200
        MAX_IMAGE_HEIGHT=800
        LOG_LEVEL=INFO
        LOG_FILE=translation.log
        ENABLE_CACHE=true
        CACHE_DIR=./.cache
        EOF
        echo "环境变量文件创建完成"

    - name: 运行环境测试脚本
      run: |
        cd scripts
        python test_environment.py

    - name: 测试图片处理器模块
      run: |
        cd scripts
        python -c "from image_processor import ImageProcessor; print('图片处理器模块导入成功')"

    - name: 测试图片处理功能
      run: |
        cd scripts
        python -c "
        from image_processor import ImageProcessor
        import os

        # 创建处理器实例
        processor = ImageProcessor()
        print(f'图片处理器初始化成功')
        print(f'下载路径: {processor.download_path}')
        print(f'图片质量: {processor.quality}')
        print(f'最大宽度: {processor.max_width}')
        print(f'最大高度: {processor.max_height}')

        # 验证目录创建
        if os.path.exists(processor.download_path):
            print(f'✓ 图片下载目录已创建: {processor.download_path}')
        else:
            print(f'✗ 图片下载目录创建失败')
        "

    - name: 检查GitHub Secrets配置
      run: |
        echo "检查环境变量配置状态:"
        echo "注意: 实际的API密钥应该在GitHub Secrets中配置"

        # 检查是否有配置（不显示实际值）
        if [ -n "${{ secrets.GOOGLE_API_KEY }}" ]; then
          echo "✓ GOOGLE_API_KEY 已配置"
        else
          echo "○ GOOGLE_API_KEY 未配置（可选）"
        fi

        if [ -n "${{ secrets.DEEPL_API_KEY }}" ]; then
          echo "✓ DEEPL_API_KEY 已配置"
        else
          echo "○ DEEPL_API_KEY 未配置（可选）"
        fi

        if [ -n "${{ secrets.BAIDU_APP_ID }}" ]; then
          echo "✓ BAIDU_APP_ID 已配置"
        else
          echo "○ BAIDU_APP_ID 未配置（可选）"
        fi

  test-image-processing:
    name: 测试图片处理功能
    runs-on: ubuntu-latest
    needs: check-environment

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: 创建测试环境
      run: |
        cat > .env << EOF
        IMAGE_DOWNLOAD_PATH=./test_images
        IMAGE_QUALITY=85
        MAX_IMAGE_WIDTH=1200
        MAX_IMAGE_HEIGHT=800
        LOG_LEVEL=DEBUG
        EOF

    - name: 运行图片处理测试
      run: |
        cd scripts
        python -c "
        from image_processor import ImageProcessor
        import os

        # 测试初始化
        processor = ImageProcessor('./test_images')
        print('✓ 图片处理器初始化成功')

        # 测试目录创建
        assert os.path.exists('./test_images'), '图片目录创建失败'
        print('✓ 图片目录创建成功')

        # 测试文件扩展名检测
        test_cases = [
            ('http://example.com/image.jpg', '.jpg'),
            ('http://example.com/image.png', '.png'),
            ('http://example.com/image.gif', '.gif'),
            ('http://example.com/image', '.jpg'),  # 默认值
        ]

        for url, expected_ext in test_cases:
            ext = processor._get_image_extension(b'', url)
            assert ext == expected_ext, f'扩展名检测失败: {url}'

        print('✓ 文件扩展名检测测试通过')
        print('所有测试通过！')
        "

    - name: 生成测试报告
      if: always()
      run: |
        echo "## Python环境配置测试报告" > test_report.md
        echo "" >> test_report.md
        echo "### 测试环境" >> test_report.md
        echo "- Python版本: $(python --version)" >> test_report.md
        echo "- 操作系统: Ubuntu Latest" >> test_report.md
        echo "- 测试时间: $(date)" >> test_report.md
        echo "" >> test_report.md
        echo "### 测试结果" >> test_report.md
        echo "- ✓ Python环境配置成功" >> test_report.md
        echo "- ✓ 所有依赖包安装成功" >> test_report.md
        echo "- ✓ 图片处理器模块正常工作" >> test_report.md
        echo "- ✓ 环境变量配置正确" >> test_report.md

        cat test_report.md