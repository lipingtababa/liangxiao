name: AI开发启动检查清单

on:
  workflow_dispatch:
    inputs:
      developer_id:
        description: '开发者标识（用于跟踪）'
        required: false
        default: 'ai-developer'

jobs:
  startup-checklist:
    runs-on: ubuntu-latest
    outputs:
      ready_to_develop: ${{ steps.final_check.outputs.ready }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 记录开发会话
        run: |
          echo "=== AI开发会话开始 ==="
          echo "开发者: ${{ github.event.inputs.developer_id }}"
          echo "时间: $(date)"
          echo "分支: $(git branch --show-current)"
          echo "最新提交: $(git log -1 --oneline)"

      - name: 1. 环境检查
        id: env_check
        run: |
          echo "=== 步骤1: 环境检查 ==="

          echo "✓ GitHub Actions环境已就绪"
          echo "✓ 运行器: ${{ runner.os }} ${{ runner.arch }}"
          echo "✓ 工作目录: $(pwd)"

          # Python检查
          python --version || {
            echo "❌ Python未安装"
            echo "python_ok=false" >> $GITHUB_OUTPUT
            exit 1
          }
          echo "✓ Python已安装: $(python --version)"
          echo "python_ok=true" >> $GITHUB_OUTPUT

      - name: 2. 项目结构检查
        id: structure_check
        run: |
          echo "=== 步骤2: 项目结构检查 ==="

          # 检查关键目录
          DIRS_OK=true
          for dir in scripts lib .github/workflows .github/test-data; do
            if [ -d "$dir" ]; then
              echo "✓ 目录存在: $dir"
            else
              echo "❌ 目录缺失: $dir"
              DIRS_OK=false
            fi
          done

          echo "structure_ok=$DIRS_OK" >> $GITHUB_OUTPUT

      - name: 3. 依赖检查
        id: deps_check
        run: |
          echo "=== 步骤3: 依赖检查 ==="

          if [ -f "requirements.txt" ]; then
            echo "✓ requirements.txt 存在"
            echo "安装依赖..."
            pip install -r requirements.txt
            echo "✓ 依赖安装完成"
            echo "deps_ok=true" >> $GITHUB_OUTPUT
          else
            echo "❌ requirements.txt 不存在"
            echo "deps_ok=false" >> $GITHUB_OUTPUT
          fi

      - name: 4. 测试工具检查
        id: tools_check
        run: |
          echo "=== 步骤4: 测试工具检查 ==="

          TOOLS_OK=true

          # 检查验证脚本
          for script in scripts/test/validate_markdown.py scripts/test/validate_extraction.py scripts/test/validate_images.py; do
            if [ -f "$script" ]; then
              echo "✓ 验证脚本存在: $(basename $script)"
            else
              echo "❌ 验证脚本缺失: $script"
              TOOLS_OK=false
            fi
          done

          # 检查测试工作流
          for workflow in .github/workflows/test-*.yml; do
            if [ -f "$workflow" ]; then
              echo "✓ 测试工作流存在: $(basename $workflow)"
            else
              echo "⚠ 测试工作流可能缺失"
            fi
          done

          echo "tools_ok=$TOOLS_OK" >> $GITHUB_OUTPUT

      - name: 5. 代码骨架检查
        id: scaffold_check
        run: |
          echo "=== 步骤5: 代码骨架检查 ==="

          if [ -f "scripts/scaffold.py" ]; then
            echo "✓ 脚手架脚本存在"
            
            # 检查是否需要运行脚手架
            if [ ! -f "scripts/extract_content.py" ]; then
              echo "⚠ 核心脚本不存在，运行脚手架..."
              python scripts/scaffold.py
              echo "✓ 脚手架已执行"
            else
              echo "✓ 核心脚本已存在"
            fi
            echo "scaffold_ok=true" >> $GITHUB_OUTPUT
          else
            echo "❌ 脚手架脚本不存在"
            echo "scaffold_ok=false" >> $GITHUB_OUTPUT
          fi

      - name: 6. 文档检查
        id: docs_check
        run: |
          echo "=== 步骤6: 文档检查 ==="

          DOCS_OK=true

          # 检查关键文档
          for doc in AI_DEVELOPER_GUIDE.md .github/test-data/README.md; do
            if [ -f "$doc" ]; then
              echo "✓ 文档存在: $doc"
            else
              echo "❌ 文档缺失: $doc"
              DOCS_OK=false
            fi
          done

          echo "docs_ok=$DOCS_OK" >> $GITHUB_OUTPUT

      - name: 7. API密钥检查
        id: secrets_check
        run: |
          echo "=== 步骤7: API密钥检查 ==="

          SECRETS_OK=true

          # 检查翻译API密钥（不显示值）
          if [ -n "${{ secrets.GOOGLE_API_KEY }}" ] || [ -n "${{ secrets.DEEPL_API_KEY }}" ]; then
            echo "✓ 至少一个翻译API密钥已配置"
          else
            echo "⚠ 警告: 没有配置翻译API密钥"
            echo "  翻译功能将无法正常工作"
            SECRETS_OK=false
          fi

          echo "secrets_ok=$SECRETS_OK" >> $GITHUB_OUTPUT

      - name: 8. 示例数据检查
        id: samples_check
        run: |
          echo "=== 步骤8: 示例数据检查 ==="

          SAMPLES_OK=true

          # 检查测试数据文件
          if [ -f ".github/test-data/sample-articles.txt" ]; then
            echo "✓ 示例文章列表存在"
            echo "  包含 $(grep -v '^#' .github/test-data/sample-articles.txt | wc -l) 个URL"
          else
            echo "❌ 示例文章列表不存在"
            SAMPLES_OK=false
          fi

          if [ -d ".github/test-data/expected-output" ]; then
            echo "✓ 预期输出示例存在"
            ls -la .github/test-data/expected-output/
          else
            echo "❌ 预期输出示例不存在"
            SAMPLES_OK=false
          fi

          echo "samples_ok=$SAMPLES_OK" >> $GITHUB_OUTPUT

      - name: 最终检查和建议
        id: final_check
        run: |
          echo "=== 最终检查结果 ==="

          # 收集所有检查结果
          ALL_OK=true
          CRITICAL_OK=true

          # 关键检查项
          if [ "${{ steps.env_check.outputs.python_ok }}" != "true" ]; then
            echo "❌ Python环境未就绪"
            CRITICAL_OK=false
          fi

          if [ "${{ steps.structure_check.outputs.structure_ok }}" != "true" ]; then
            echo "❌ 项目结构不完整"
            CRITICAL_OK=false
          fi

          if [ "${{ steps.deps_check.outputs.deps_ok }}" != "true" ]; then
            echo "❌ 依赖未安装"
            CRITICAL_OK=false
          fi

          # 非关键检查项
          if [ "${{ steps.secrets_check.outputs.secrets_ok }}" != "true" ]; then
            echo "⚠ API密钥未配置（翻译功能受限）"
            ALL_OK=false
          fi

          if [ "${{ steps.docs_check.outputs.docs_ok }}" != "true" ]; then
            echo "⚠ 部分文档缺失"
            ALL_OK=false
          fi

          echo "" 
          if [ "$CRITICAL_OK" = "true" ]; then
            echo "✅ 关键检查通过，可以开始开发"
            echo "ready=true" >> $GITHUB_OUTPUT
          else
            echo "❌ 关键检查未通过，请先解决上述问题"
            echo "ready=false" >> $GITHUB_OUTPUT
          fi

      - name: 生成开发指导
        if: always()
        run: |
          echo "=== 个性化开发指导 ==="

          cat > development-guidance.md << 'EOF'
          # AI开发者个性化指导

          开发者: ${{ github.event.inputs.developer_id }}
          准备状态: ${{ steps.final_check.outputs.ready == 'true' && '✅ 已就绪' || '❌ 未就绪' }}

          ## 下一步建议
          EOF

          # 根据检查结果生成建议
          if [ "${{ steps.final_check.outputs.ready }}" = "true" ]; then
            cat >> development-guidance.md << 'EOF'

          ### 立即开始开发
          1. 运行 `ai-self-test.yml` 测试当前代码状态
          2. 实现 `scripts/extract_content.py`
          3. 使用 `test-extractor.yml` 验证实现
          4. 继续实现其他组件

          ### 可用的调试工具
          - `debug-helper.yml` - 环境调试
          - `ai-self-test.yml` - 代码自测
          - 各种 `test-*.yml` - 组件测试

          EOF
          else
            cat >> development-guidance.md << 'EOF'

          ### 需要先完成以下准备
          EOF
            
            if [ "${{ steps.deps_check.outputs.deps_ok }}" != "true" ]; then
              echo "1. 创建 requirements.txt 文件" >> development-guidance.md
            fi
            
            if [ "${{ steps.scaffold_check.outputs.scaffold_ok }}" != "true" ]; then
              echo "2. 运行脚手架脚本创建基础代码" >> development-guidance.md
            fi
            
            if [ "${{ steps.structure_check.outputs.structure_ok }}" != "true" ]; then
              echo "3. 创建必要的目录结构" >> development-guidance.md
            fi
          fi

          cat >> development-guidance.md << 'EOF'

          ## 重要提醒
          - 你在GitHub Actions环境中工作
          - 每次运行都是独立的，无持久状态
          - 使用日志和artifacts进行调试
          - 遵循AI_DEVELOPER_GUIDE.md中的指导

          ## 有用的命令示例
          ```python
          # 读取测试URL
          with open('.github/test-data/sample-articles.txt') as f:
              urls = [line.strip() for line in f if line and not line.startswith('#')]

          # 保存JSON数据
          import json
          with open('output.json', 'w', encoding='utf-8') as f:
              json.dump(data, f, ensure_ascii=False, indent=2)

          # 创建目录
          from pathlib import Path
          Path('output/images').mkdir(parents=True, exist_ok=True)
          ```

          祝开发顺利！
          EOF

          cat development-guidance.md

      - name: 上传启动报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ai-startup-report-${{ github.run_number }}
          path: |
            development-guidance.md
          retention-days: 7

      - name: 设置输出摘要
        run: |
          echo "## AI开发启动检查完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.final_check.outputs.ready }}" = "true" ]; then
            echo "### ✅ 环境已就绪，可以开始开发" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**下一步:**" >> $GITHUB_STEP_SUMMARY
            echo "1. 查看 `development-guidance.md` 获取个性化指导" >> $GITHUB_STEP_SUMMARY
            echo "2. 运行 `ai-self-test.yml` 开始开发" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ 环境未就绪" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**需要修复:**" >> $GITHUB_STEP_SUMMARY
            echo "查看上方日志了解具体问题" >> $GITHUB_STEP_SUMMARY
          fi
