name: AI开发调试助手

on:
  workflow_dispatch:
    inputs:
      command:
        description: '要执行的调试命令'
        required: false
        default: 'ls -la'
      python_code:
        description: 'Python代码片段（base64编码以避免YAML问题）'
        required: false
        default: ''
      inspect_file:
        description: '要检查的文件路径'
        required: false
        default: ''
      test_import:
        description: '要测试导入的Python包'
        required: false
        default: ''

jobs:
  debug:
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 显示环境信息
        run: |
          echo "=== 环境信息 ==="
          echo "当前目录: $(pwd)"
          echo "用户: $(whoami)"
          echo "Python版本: $(python --version)"
          echo "pip版本: $(pip --version)"
          echo ""
          echo "=== 目录结构 ==="
          ls -la
          echo ""
          echo "=== 环境变量 ==="
          echo "PATH: $PATH"
          echo "PYTHONPATH: $PYTHONPATH"
          echo "HOME: $HOME"
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "GITHUB_ACTION: $GITHUB_ACTION"
          echo "RUNNER_OS: $RUNNER_OS"
          echo "RUNNER_ARCH: $RUNNER_ARCH"

      - name: 安装依赖
        run: |
          if [ -f requirements.txt ]; then
            echo "=== 安装requirements.txt ==="
            pip install -r requirements.txt
            echo ""
            echo "=== 已安装的包 ==="
            pip list
          else
            echo "requirements.txt 不存在"
          fi

      - name: 执行调试命令
        if: ${{ github.event.inputs.command != '' }}
        run: |
          echo "=== 执行命令: ${{ github.event.inputs.command }} ==="
          ${{ github.event.inputs.command }}

      - name: 执行Python代码
        if: ${{ github.event.inputs.python_code != '' }}
        run: |
          echo "=== 执行Python代码 ==="
          # 解码base64编码的Python代码
          echo "${{ github.event.inputs.python_code }}" | base64 -d > temp_debug.py
          echo "代码内容:"
          cat temp_debug.py
          echo ""
          echo "执行结果:"
          python temp_debug.py

      - name: 检查文件内容
        if: ${{ github.event.inputs.inspect_file != '' }}
        run: |
          echo "=== 检查文件: ${{ github.event.inputs.inspect_file }} ==="
          if [ -f "${{ github.event.inputs.inspect_file }}" ]; then
            echo "文件存在"
            echo "文件信息:"
            ls -la "${{ github.event.inputs.inspect_file }}"
            echo ""
            echo "文件内容 (前50行):"
            head -50 "${{ github.event.inputs.inspect_file }}"
            echo ""
            echo "文件类型:"
            file "${{ github.event.inputs.inspect_file }}"
          else
            echo "文件不存在"
            echo "尝试查找类似文件:"
            find . -name "*$(basename "${{ github.event.inputs.inspect_file }}")*" -type f | head -10
          fi

      - name: 测试Python导入
        if: ${{ github.event.inputs.test_import != '' }}
        run: |
          echo "=== 测试导入: ${{ github.event.inputs.test_import }} ==="
          python -c "
          try:
              import ${{ github.event.inputs.test_import }}
              print('✓ 成功导入 ${{ github.event.inputs.test_import }}')
              print(f'模块路径: {${{ github.event.inputs.test_import }}.__file__ if hasattr(${{ github.event.inputs.test_import }}, '__file__') else 'built-in'}')
              
              # 显示模块的主要属性
              attrs = dir(${{ github.event.inputs.test_import }})
              print(f'模块包含 {len(attrs)} 个属性/方法')
              print('主要内容:', [a for a in attrs if not a.startswith('_')][:10])
          except ImportError as e:
              print(f'✗ 导入失败: {e}')
              print('尝试pip install ${{ github.event.inputs.test_import }}')
              import subprocess
              result = subprocess.run(['pip', 'install', '${{ github.event.inputs.test_import }}'], capture_output=True, text=True)
              if result.returncode == 0:
                  print('✓ 安装成功')
              else:
                  print(f'✗ 安装失败: {result.stderr}')
          "

      - name: 检查项目结构
        run: |
          echo "=== 项目结构树 ==="
          # 使用find创建目录树（因为tree命令可能不可用）
          find . -type d -name ".git" -prune -o -type d -print | head -30 | sed 's|[^/]*/|  |g'

          echo ""
          echo "=== Python文件列表 ==="
          find . -name "*.py" -type f | head -20

          echo ""
          echo "=== 配置文件列表 ==="
          find . -name "*.yml" -o -name "*.yaml" -o -name "*.json" -o -name "*.txt" | grep -v ".git" | head -20

      - name: 测试脚本可执行性
        run: |
          echo "=== 测试脚本可执行性 ==="

          # 查找所有Python脚本
          for script in $(find scripts -name "*.py" -type f 2>/dev/null | head -5); do
            echo "检查: $script"
            if [ -x "$script" ]; then
              echo "  ✓ 可执行"
            else
              echo "  ✗ 不可执行 (需要 chmod +x)"
            fi
            
            # 检查是否有main函数
            if grep -q "if __name__ == '__main__':" "$script"; then
              echo "  ✓ 有main函数"
              # 尝试显示帮助信息
              python "$script" --help 2>&1 | head -5 || echo "  ! 无法显示帮助"
            else
              echo "  - 没有main函数"
            fi
            echo ""
          done

      - name: 检查API密钥配置
        run: |
          echo "=== 检查密钥配置 ==="

          # 检查必要的secrets（不显示值）
          if [ -n "${{ secrets.GOOGLE_API_KEY }}" ]; then
            echo "✓ GOOGLE_API_KEY 已配置"
          else
            echo "✗ GOOGLE_API_KEY 未配置"
          fi

          if [ -n "${{ secrets.DEEPL_API_KEY }}" ]; then
            echo "✓ DEEPL_API_KEY 已配置"
          else
            echo "✗ DEEPL_API_KEY 未配置"
          fi

          # 检查环境变量
          echo ""
          echo "可用的GitHub上下文变量:"
          echo "- github.repository: ${{ github.repository }}"
          echo "- github.ref: ${{ github.ref }}"
          echo "- github.sha: ${{ github.sha }}"
          echo "- github.workflow: ${{ github.workflow }}"
          echo "- github.run_number: ${{ github.run_number }}"
          echo "- github.run_id: ${{ github.run_id }}"

      - name: 生成调试报告
        if: always()
        run: |
          echo "=== 调试报告 ==="
          cat > debug-report.txt << 'EOF'
          调试会话报告
          ============
          时间: $(date)
          运行ID: ${{ github.run_id }}

          执行的操作:
          - 命令: ${{ github.event.inputs.command }}
          - Python代码: ${{ github.event.inputs.python_code != '' && '已执行' || '未执行' }}
          - 文件检查: ${{ github.event.inputs.inspect_file }}
          - 导入测试: ${{ github.event.inputs.test_import }}

          环境摘要:
          - Python版本: $(python --version 2>&1)
          - 工作目录: $(pwd)
          - 可用内存: $(free -h | grep Mem | awk '{print $7}')
          - 可用磁盘: $(df -h . | tail -1 | awk '{print $4}')
          EOF

          cat debug-report.txt

      - name: 上传调试信息
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: debug-info-${{ github.run_number }}
          path: |
            debug-report.txt
            temp_debug.py
            *.log
          retention-days: 1
